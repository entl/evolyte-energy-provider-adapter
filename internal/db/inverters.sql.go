// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: inverters.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInverter = `-- name: CreateInverter :one
INSERT INTO inverters (
    user_id,
    vendor,
    model,
    serial_number,
    total_lifetime_production_kwh,
    installation_date,
    created_at,
    updated_at
)
VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8
)
RETURNING
    id, user_id, vendor, model, serial_number,
    total_lifetime_production_kwh, installation_date, created_at, updated_at
`

type CreateInverterParams struct {
	UserID                     int32
	Vendor                     string
	Model                      string
	SerialNumber               string
	TotalLifetimeProductionKwh float64
	InstallationDate           time.Time
	CreatedAt                  time.Time
	UpdatedAt                  time.Time
}

func (q *Queries) CreateInverter(ctx context.Context, arg CreateInverterParams) (Inverter, error) {
	row := q.db.QueryRow(ctx, createInverter,
		arg.UserID,
		arg.Vendor,
		arg.Model,
		arg.SerialNumber,
		arg.TotalLifetimeProductionKwh,
		arg.InstallationDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Inverter
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Vendor,
		&i.Model,
		&i.SerialNumber,
		&i.TotalLifetimeProductionKwh,
		&i.InstallationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInverter = `-- name: DeleteInverter :exec
DELETE FROM inverters WHERE id = $1
`

func (q *Queries) DeleteInverter(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteInverter, id)
	return err
}

const getInverterById = `-- name: GetInverterById :one
SELECT id, user_id, vendor, model, serial_number, total_lifetime_production_kwh, installation_date, created_at, updated_at FROM inverters WHERE id = $1
`

func (q *Queries) GetInverterById(ctx context.Context, id int32) (Inverter, error) {
	row := q.db.QueryRow(ctx, getInverterById, id)
	var i Inverter
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Vendor,
		&i.Model,
		&i.SerialNumber,
		&i.TotalLifetimeProductionKwh,
		&i.InstallationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInverters = `-- name: GetInverters :many
SELECT id, user_id, vendor, model, serial_number, total_lifetime_production_kwh, installation_date, created_at, updated_at FROM inverters LIMIT $1 OFFSET $2
`

type GetInvertersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetInverters(ctx context.Context, arg GetInvertersParams) ([]Inverter, error) {
	rows, err := q.db.Query(ctx, getInverters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inverter
	for rows.Next() {
		var i Inverter
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Vendor,
			&i.Model,
			&i.SerialNumber,
			&i.TotalLifetimeProductionKwh,
			&i.InstallationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvertersByUserId = `-- name: GetInvertersByUserId :many
SELECT id, user_id, vendor, model, serial_number, total_lifetime_production_kwh, installation_date, created_at, updated_at FROM inverters WHERE user_id = $1
`

func (q *Queries) GetInvertersByUserId(ctx context.Context, userID int32) ([]Inverter, error) {
	rows, err := q.db.Query(ctx, getInvertersByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inverter
	for rows.Next() {
		var i Inverter
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Vendor,
			&i.Model,
			&i.SerialNumber,
			&i.TotalLifetimeProductionKwh,
			&i.InstallationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInverter = `-- name: UpdateInverter :exec
UPDATE inverters
SET
    vendor = COALESCE($2, vendor),
    model = COALESCE($3, model),
    serial_number = COALESCE($4, serial_number),
    total_lifetime_production_kwh = COALESCE($5, total_lifetime_production_kwh),
    installation_date = COALESCE($6, installation_date),
    updated_at = NOW()
WHERE id = $1
`

type UpdateInverterParams struct {
	ID                         int32
	Vendor                     pgtype.Text
	Model                      pgtype.Text
	SerialNumber               pgtype.Text
	TotalLifetimeProductionKwh pgtype.Float8
	InstallationDate           *time.Time
}

func (q *Queries) UpdateInverter(ctx context.Context, arg UpdateInverterParams) error {
	_, err := q.db.Exec(ctx, updateInverter,
		arg.ID,
		arg.Vendor,
		arg.Model,
		arg.SerialNumber,
		arg.TotalLifetimeProductionKwh,
		arg.InstallationDate,
	)
	return err
}
